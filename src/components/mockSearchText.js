const data = [
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "id": "2",
      "isParsed": true,
      "modelUsage": "null",
      "outputNodeExecTime": "0ms",
      "outputNodeId": "Start_bYxoRU",
      "outputNodeName": "开始",
      "outputNodeStatus": "success",
      "outputNodeType": "Start"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"LLM_XNwa\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "id": "3",
      "isParsed": true,
      "modelUsage": "null",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "LLM_XNwa",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"web desarrollo aplicación\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":3,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "4",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":3}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "web desarrollo aplicación"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" internet sitio web tecnología\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":7,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "5",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":7}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " internet sitio web tecnología"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" online servidor cliente navegador\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":11,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "6",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":11}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " online servidor cliente navegador"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" programación diseño implement\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":15,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "7",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":15}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " programación diseño implement"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"ación seguridad optimización rendimiento experiencia usuario inter\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":24,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "8",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":24}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "ación seguridad optimización rendimiento experiencia usuario inter"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"actividad funcionalidad contenido\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":30,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "9",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":30}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "actividad funcionalidad contenido"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" digital plataforma virtual estructura frontend backend full\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":38,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "10",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":38}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " digital plataforma virtual estructura frontend backend full"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"stack frameworks lenguajes protocolos HTTP HTTPS API\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":48,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "11",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":48}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "stack frameworks lenguajes protocolos HTTP HTTPS API"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" RESTful integración bases\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":53,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "12",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":53}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " RESTful integración bases"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" datos escalabilidad mantenimiento compatibilidad adaptabilidad\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":62,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "13",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":62}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " datos escalabilidad mantenimiento compatibilidad adaptabilidad"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" tendencias innovación está\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":67,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "14",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":67}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " tendencias innovación está"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"ndares W3C accesibilidad SEO posicionamiento analytics\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":78,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "15",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":78}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "ndares W3C accesibilidad SEO posicionamiento analytics"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" monitorización hosting dominio CMS framework CSS\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":86,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "16",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":86}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " monitorización hosting dominio CMS framework CSS"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" HTML JavaScript PHP Python Ruby Java Node.js React\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":95,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "17",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":95}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " HTML JavaScript PHP Python Ruby Java Node.js React"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" Angular Vue.js Django\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":99,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "18",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":99}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " Angular Vue.js Django"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" Flask Laravel Symfony Express\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":103,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "19",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":103}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " Flask Laravel Symfony Express"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"js configuración personal\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":107,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "20",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":107}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "js configuración personal"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"ización automatización calidad\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":111,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "21",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":111}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "ización automatización calidad"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" control versiones Git\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":115,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "22",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":115}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " control versiones Git"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" gestión proyectos colaboración herramient\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":120,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "23",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":120}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " gestión proyectos colaboración herramient"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"as testing debugging deployment actual\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":125,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "24",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":125}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "as testing debugging deployment actual"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"ización mejora continua\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":129,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "25",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":129}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "ización mejora continua"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" recursos tutoriales guías documentación casos\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":137,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "26",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":137}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " recursos tutoriales guías documentación casos"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" estudio práctica profesional expert\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":141,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "27",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":141}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " estudio práctica profesional expert"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"o principiante aprend\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":146,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "28",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":146}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "o principiante aprend"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"izaje formación cert\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":151,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "29",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":151}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "izaje formación cert"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"ificación especialización talento empleo mercado trabajo\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":160,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "30",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":160}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "ificación especialización talento empleo mercado trabajo"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\" freelance negocio emprendimiento startup éxito案例研究最佳\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":170,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "31",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":170}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": " freelance negocio emprendimiento startup éxito案例研究最佳"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"实践专业人士初学者学习\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":175,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "32",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":175}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "实践专业人士初学者学习"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"培训认证专业化人才\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":179,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "33",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":179}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "培训认证专业化人才"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"就业市场工作自由职业商业\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":185,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "34",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":185}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "就业市场工作自由职业商业"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"创业初创公司成功案例\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":190,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "35",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":190}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "创业初创公司成功案例"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"研究最佳实践专业人士初学者\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":196,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "36",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":196}]",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "executing",
      "outputNodeType": "LLM",
      "outputText": "研究最佳实践专业人士初学者"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"学习培训认证专业化\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\",\\\"nodeExecTime\\\":\\\"9072ms\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":200,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "37",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":200}]",
      "outputNodeExecTime": "9072ms",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "success",
      "outputNodeType": "LLM",
      "outputText": "学习培训认证专业化"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\",\\\"nodeExecTime\\\":\\\"9072ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"Retrieval_VohC\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"nodeType\\\":\\\"Retrieval\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"Retrieval_VohC\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":200,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "38",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":200}]",
      "outputNodeExecTime": "9072ms",
      "outputNodeId": "LLM_XNwa",
      "outputNodeName": "大模型_1",
      "outputNodeStatus": "success",
      "outputNodeType": "LLM"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\",\\\"nodeExecTime\\\":\\\"9072ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"Retrieval_VohC\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"nodeType\\\":\\\"Retrieval\\\",\\\"nodeStatus\\\":\\\"executing\\\",\\\"nodeId\\\":\\\"Retrieval_VohC\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"null\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":200,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "38",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":200}]",
      "outputNodeId": "Retrieval_VohC",
      "outputNodeName": "Retrieval_VohC",
      "outputNodeStatus": "executing",
      "outputNodeType": "Retrieval"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\",\\\"nodeExecTime\\\":\\\"9072ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"知识库_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"rewriteQuery\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"web\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"chunkList\\\\\\\\\\\\\\\":[{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4771150052547455,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"articles/codec-and-yakit\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:articles/codec-and-yakit\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:Host: www.example.com\\\\\\\\\\\\\\\\nContent-Length: 9\\\\\\\\\\\\\\\\nkey=value关卡2：数据包修复web fuzzer会自动对HTTP数据进行一定程度的修复，以保证发送出的数据尽可能地能被服务器解析。不过有些时候可能需要自我控制如何修复数据包，也想看到数据包修复后地内容，这个时候就可以使用自定义变形数据包功能，编写一个修复数据包的插件。handle = func(origin /*string*/) {\\\\\\\\\\\\\\\\n// 这里使用的yaklang内置地数据包修复功能，可以修复Content-length等部分，用户也可以自定义一些自己地修复规则。\\\\\\\\\\\\\\\\nreturn string(poc.FixHTTPRequest(origin))\\\\\\\\\\\\\\\\n}比如下面一个有问题的数据包POST / HTTP/1.1\\\\\\\\\\\\\\\\nContent-Type: application/x-www-form-urlencoded\\\\\\\\\\\\\\\\nHost: www.example.com\\\\\\\\\\\\\\\\nContent-Length: 1\\\\\\\\\\\\\\\\nkey=value其CL显然不正确，调用修复数据地功能之后修复如下POST / HTTP/1.1\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4738810360431671,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"api-manual/api/http\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:api-manual/api/http\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:http\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4429461359977722,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"products/Web Fuzzer/advanced-configuration\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:products/Web Fuzzer/advanced-configuration\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:渲染 Fuzz默认情况下， 渲染 Fuzz 选项是打开并选中标准模式的。 三个模式的区别如下：关闭：关闭该选项之后，所有的 Fuzztag 就会失效。这在我们不需要Fuzz标签而且与某些模板引擎语法冲突的情况下非常有用。 标准：标准模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，每个 Fuzztag 必须严格符合 {{tagname1({{tagname2(param)}})}} 的格式。 兼容：兼容模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，在嵌套fuzztag的情况下，我们可以省略多余的花括号，例如： {{tagname1(tagname2(param))}} 。不修复长度默认情况下，Web Fuzzer会对请求包进行一些修复，其中也会对 Content-Length 请求头进行修复。\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4214630722999573,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"docs/yakexamples/fuzz_tutorial\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:docs/yakexamples/fuzz_tutorial\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:Fuzzing is the art of automatic bug finding, and it’s role is to find software implementation faults, and identify them if possible.一般来说，在 Web 漏洞扫描中，我们也许并不知道一个参数应该测试什么。甚至我们能自动把需要测试漏洞的参数寻找到已经是一个很难的事儿了。往往在编写漏洞检测算法的时候，编写漏洞的同学会花大量的时间来完成基础设施的搭建，和编写基础的发包代码。在 Yak 中，作者并不希望用户把时间和经历都花在基础设施中，而是希望用户尽可能关注漏洞检测算法本身。在实际的使用过程中这种基础设施往往并没有合适的方式提供给用户，如果作为一家公司，这个可以作为公司员工遵循或者可以使用的框架之一，但是作为外部用户，能有这种研发体验其实是一件不容易的事情Web Fuzz 本质：针对 HTTP 数据包的 Fuzz本质上针对 HTTP 请求的 Fuzz 是 Web Fuzz 需要做的核心事项。再说具体一点，其实针对 HTTP Request 是整个测试的核心：\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.41372963786125183,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"products/Web Fuzzer/fuzz-other\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:products/Web Fuzzer/fuzz-other\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:编码与解码我们经常会有对请求包中的数据进行编码与解码的需求，这时候我们就可以使用 Web Fuzzer 的 编码与解码 功能。使用右键进行编码与解码在 Web Fuzzer 中，我们选中了一段数据后，可以右键对其进行编码与解码，在右键中内置了一些场景的编码与解码选项：当我们选择了其中一个选项后，会弹出一个窗口显示编码/解码后的效果，此时再点击替换内容，即可将原来的内容替换为编码/解码后的内容：* 使用悬浮框进行编码与解码当你在Web Fuzzer中鼠标点选了某个位置时，会弹出一个悬浮框，在这个悬浮框中你选择对选择的内容进行编码和解码。当我们选择了其中一个编码时，内容并不会被编码，而是使用了 fuzztag 来将其包裹，这会在 Web Fuzzer 真正发送请求前才将其编码。当我们选择解码时，会进行智能解码的方式，即会自动判断编码类型，然后进行解码，之后选择一个你认为正确的内容，可以对选中的内容进行替换：HTTP请求包变形这个功能可以对请求包进行一些变形，例如将GET请求变为POST请求，或者将POST请求变为GET请求等等。\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4066096544265747,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"docs/yak-basic/cap8-3-port-n-service-scan\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:docs/yak-basic/cap8-3-port-n-service-scan\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:servicescan.excludeHosts(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1.1.1.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")|\\\\\\\\\\\\\\\\n||probeTimeout|设置单个请求探测超时时间为10秒 servicescan.probeTimeout(10)|\\\\\\\\\\\\\\\\n||proxy|设置代理 servicescan.proxy(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"http://127.0.0.1:8083\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")|\\\\\\\\\\\\\\\\n||cache|设置启用缓存 servicescan.cache(true)|\\\\\\\\\\\\\\\\n||databaseCache|设置启用数据库缓存 servicescan.databaseCache(true)|\\\\\\\\\\\\\\\\n||webRule|设置启用用户自定义 web 规则|\\\\\\\\\\\\\\\\n||nmapRule|设置 nmap 规则文件|\\\\\\\\\\\\\\\\n||nmapRarityMax|nmap 规则筛选，通过稀有度 servicescan.nmapRarityMax(10)|\\\\\\\\\\\\\\\\n||maxProbes|设置每个服务最多主动发送的包数 servicescan.maxProbes(10)|\\\\\\\\\\\\\\\\n||maxProbesConcurrent|设置主动发包模式下的并发量 servicescan.maxProbesConcurrent(10)|\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.40291067957878113,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Yaklab/wiki/CommonVulnerabilities/xss\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:Yaklab/wiki/CommonVulnerabilities/xss\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:sidebar_position: 10XSS漏洞反射型XSS漏洞描述：反射型XSS是一种非持久性的攻击，它指的是恶意攻击者往Web页面里插入恶意代码，当用户浏览该页之时，嵌入在Web页面中的HTML代码会被执行，从而达到恶意攻击用户的目的。这里插入的恶意代码并没有保存在目标网站，需要引诱用户点击一个链接，跳转到目标网站上的恶意页面来实施攻击漏洞案例：POST型反射XSS访问测试网站上的一个搜索框界面 在搜索框输入： alert(1) 点击查询时开启抓包自动将输入的 payload 拼接到发送的包中放包后成功触发弹窗GET型反射XSS直接拼接到含有漏洞URL中，例如：https://xxx.xxxx.xxx/search/foods.html?keyword= alert(1)存储型XSS漏洞描述：存储型XSS，也就是持久型XSS。攻击者上传的包含恶意js脚本的留言等信息被Web应用程序保存到数据库中，Web应用程序在生成新的页面的时候如果包含了该恶意js脚本，这样会导致所有访问该网页的浏览器解析执行该恶意脚本。这种攻击类型一般常见在博客、论坛等网站中漏洞案例：案例1\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"}]}\\\\\\\"}\\\",\\\"nodeType\\\":\\\"Retrieval\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Retrieval_VohC\\\",\\\"nodeExecTime\\\":\\\"1086ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"结束\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"records\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"rewriteQuery\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"web\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"chunkList\\\\\\\\\\\\\\\":[{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4771150052547455,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"articles/codec-and-yakit\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:articles/codec-and-yakit\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:Host: www.example.com\\\\\\\\\\\\\\\\nContent-Length: 9\\\\\\\\\\\\\\\\nkey=value关卡2：数据包修复web fuzzer会自动对HTTP数据进行一定程度的修复，以保证发送出的数据尽可能地能被服务器解析。不过有些时候可能需要自我控制如何修复数据包，也想看到数据包修复后地内容，这个时候就可以使用自定义变形数据包功能，编写一个修复数据包的插件。handle = func(origin /*string*/) {\\\\\\\\\\\\\\\\n// 这里使用的yaklang内置地数据包修复功能，可以修复Content-length等部分，用户也可以自定义一些自己地修复规则。\\\\\\\\\\\\\\\\nreturn string(poc.FixHTTPRequest(origin))\\\\\\\\\\\\\\\\n}比如下面一个有问题的数据包POST / HTTP/1.1\\\\\\\\\\\\\\\\nContent-Type: application/x-www-form-urlencoded\\\\\\\\\\\\\\\\nHost: www.example.com\\\\\\\\\\\\\\\\nContent-Length: 1\\\\\\\\\\\\\\\\nkey=value其CL显然不正确，调用修复数据地功能之后修复如下POST / HTTP/1.1\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4738810360431671,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"api-manual/api/http\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:api-manual/api/http\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:http\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4429461359977722,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"products/Web Fuzzer/advanced-configuration\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:products/Web Fuzzer/advanced-configuration\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:渲染 Fuzz默认情况下， 渲染 Fuzz 选项是打开并选中标准模式的。 三个模式的区别如下：关闭：关闭该选项之后，所有的 Fuzztag 就会失效。这在我们不需要Fuzz标签而且与某些模板引擎语法冲突的情况下非常有用。 标准：标准模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，每个 Fuzztag 必须严格符合 {{tagname1({{tagname2(param)}})}} 的格式。 兼容：兼容模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，在嵌套fuzztag的情况下，我们可以省略多余的花括号，例如： {{tagname1(tagname2(param))}} 。不修复长度默认情况下，Web Fuzzer会对请求包进行一些修复，其中也会对 Content-Length 请求头进行修复。\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4214630722999573,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"docs/yakexamples/fuzz_tutorial\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:docs/yakexamples/fuzz_tutorial\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:Fuzzing is the art of automatic bug finding, and it’s role is to find software implementation faults, and identify them if possible.一般来说，在 Web 漏洞扫描中，我们也许并不知道一个参数应该测试什么。甚至我们能自动把需要测试漏洞的参数寻找到已经是一个很难的事儿了。往往在编写漏洞检测算法的时候，编写漏洞的同学会花大量的时间来完成基础设施的搭建，和编写基础的发包代码。在 Yak 中，作者并不希望用户把时间和经历都花在基础设施中，而是希望用户尽可能关注漏洞检测算法本身。在实际的使用过程中这种基础设施往往并没有合适的方式提供给用户，如果作为一家公司，这个可以作为公司员工遵循或者可以使用的框架之一，但是作为外部用户，能有这种研发体验其实是一件不容易的事情Web Fuzz 本质：针对 HTTP 数据包的 Fuzz本质上针对 HTTP 请求的 Fuzz 是 Web Fuzz 需要做的核心事项。再说具体一点，其实针对 HTTP Request 是整个测试的核心：\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.41372963786125183,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"products/Web Fuzzer/fuzz-other\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:products/Web Fuzzer/fuzz-other\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:编码与解码我们经常会有对请求包中的数据进行编码与解码的需求，这时候我们就可以使用 Web Fuzzer 的 编码与解码 功能。使用右键进行编码与解码在 Web Fuzzer 中，我们选中了一段数据后，可以右键对其进行编码与解码，在右键中内置了一些场景的编码与解码选项：当我们选择了其中一个选项后，会弹出一个窗口显示编码/解码后的效果，此时再点击替换内容，即可将原来的内容替换为编码/解码后的内容：* 使用悬浮框进行编码与解码当你在Web Fuzzer中鼠标点选了某个位置时，会弹出一个悬浮框，在这个悬浮框中你选择对选择的内容进行编码和解码。当我们选择了其中一个编码时，内容并不会被编码，而是使用了 fuzztag 来将其包裹，这会在 Web Fuzzer 真正发送请求前才将其编码。当我们选择解码时，会进行智能解码的方式，即会自动判断编码类型，然后进行解码，之后选择一个你认为正确的内容，可以对选中的内容进行替换：HTTP请求包变形这个功能可以对请求包进行一些变形，例如将GET请求变为POST请求，或者将POST请求变为GET请求等等。\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4066096544265747,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"docs/yak-basic/cap8-3-port-n-service-scan\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:docs/yak-basic/cap8-3-port-n-service-scan\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:servicescan.excludeHosts(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1.1.1.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")|\\\\\\\\\\\\\\\\n||probeTimeout|设置单个请求探测超时时间为10秒 servicescan.probeTimeout(10)|\\\\\\\\\\\\\\\\n||proxy|设置代理 servicescan.proxy(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"http://127.0.0.1:8083\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")|\\\\\\\\\\\\\\\\n||cache|设置启用缓存 servicescan.cache(true)|\\\\\\\\\\\\\\\\n||databaseCache|设置启用数据库缓存 servicescan.databaseCache(true)|\\\\\\\\\\\\\\\\n||webRule|设置启用用户自定义 web 规则|\\\\\\\\\\\\\\\\n||nmapRule|设置 nmap 规则文件|\\\\\\\\\\\\\\\\n||nmapRarityMax|nmap 规则筛选，通过稀有度 servicescan.nmapRarityMax(10)|\\\\\\\\\\\\\\\\n||maxProbes|设置每个服务最多主动发送的包数 servicescan.maxProbes(10)|\\\\\\\\\\\\\\\\n||maxProbesConcurrent|设置主动发包模式下的并发量 servicescan.maxProbesConcurrent(10)|\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.40291067957878113,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Yaklab/wiki/CommonVulnerabilities/xss\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:Yaklab/wiki/CommonVulnerabilities/xss\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:sidebar_position: 10XSS漏洞反射型XSS漏洞描述：反射型XSS是一种非持久性的攻击，它指的是恶意攻击者往Web页面里插入恶意代码，当用户浏览该页之时，嵌入在Web页面中的HTML代码会被执行，从而达到恶意攻击用户的目的。这里插入的恶意代码并没有保存在目标网站，需要引诱用户点击一个链接，跳转到目标网站上的恶意页面来实施攻击漏洞案例：POST型反射XSS访问测试网站上的一个搜索框界面 在搜索框输入： alert(1) 点击查询时开启抓包自动将输入的 payload 拼接到发送的包中放包后成功触发弹窗GET型反射XSS直接拼接到含有漏洞URL中，例如：https://xxx.xxxx.xxx/search/foods.html?keyword= alert(1)存储型XSS漏洞描述：存储型XSS，也就是持久型XSS。攻击者上传的包含恶意js脚本的留言等信息被Web应用程序保存到数据库中，Web应用程序在生成新的页面的时候如果包含了该恶意js脚本，这样会导致所有访问该网页的浏览器解析执行该恶意脚本。这种攻击类型一般常见在博客、论坛等网站中漏洞案例：案例1\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"}]},\\\\\\\\\\\\\\\"query\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"web\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"aisearch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"web desarrollo aplicación internet sitio web tecnología online servidor cliente navegador programación diseño implementación seguridad optimización rendimiento experiencia usuario interactividad funcionalidad contenido digital plataforma virtual estructura frontend backend fullstack frameworks lenguajes protocolos HTTP HTTPS API RESTful integración bases datos escalabilidad mantenimiento compatibilidad adaptabilidad tendencias innovación estándares W3C accesibilidad SEO posicionamiento analytics monitorización hosting dominio CMS framework CSS HTML JavaScript PHP Python Ruby Java Node.js React Angular Vue.js Django Flask Laravel Symfony Expressjs configuración personalización automatización calidad control versiones Git gestión proyectos colaboración herramientas testing debugging deployment actualización mejora continua recursos tutoriales guías documentación casos estudio práctica profesional experto principiante aprendizaje formación certificación especialización talento empleo mercado trabajo freelance negocio emprendimiento startup éxito案例研究最佳实践专业人士初学者学习培训认证专业化人才就业市场工作自由职业商业创业初创公司成功案例研究最佳实践专业人士初学者学习培训认证专业化\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"nodeType\\\":\\\"End\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"End_DrQn7F\\\",\\\"nodeExecTime\\\":\\\"5ms\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"stop\",\"text\":\"{\\\"records\\\":{\\\"rewriteQuery\\\":\\\"web\\\",\\\"chunkList\\\":[{\\\"score\\\":0.4771150052547455,\\\"imagesUrl\\\":[],\\\"documentName\\\":\\\"articles/codec-and-yakit\\\",\\\"title\\\":\\\"\\\",\\\"content\\\":\\\"【文档名】:articles/codec-and-yakit\\\\n【标题】:\\\\n【正文】:Host: www.example.com\\\\nContent-Length: 9\\\\nkey=value关卡2：数据包修复web fuzzer会自动对HTTP数据进行一定程度的修复，以保证发送出的数据尽可能地能被服务器解析。不过有些时候可能需要自我控制如何修复数据包，也想看到数据包修复后地内容，这个时候就可以使用自定义变形数据包功能，编写一个修复数据包的插件。handle = func(origin /*string*/) {\\\\n// 这里使用的yaklang内置地数据包修复功能，可以修复Content-length等部分，用户也可以自定义一些自己地修复规则。\\\\nreturn string(poc.FixHTTPRequest(origin))\\\\n}比如下面一个有问题的数据包POST / HTTP/1.1\\\\nContent-Type: application/x-www-form-urlencoded\\\\nHost: www.example.com\\\\nContent-Length: 1\\\\nkey=value其CL显然不正确，调用修复数据地功能之后修复如下POST / HTTP/1.1\\\\n\\\"},{\\\"score\\\":0.4738810360431671,\\\"imagesUrl\\\":[],\\\"documentName\\\":\\\"api-manual/api/http\\\",\\\"title\\\":\\\"\\\",\\\"content\\\":\\\"【文档名】:api-manual/api/http\\\\n【标题】:\\\\n【正文】:http\\\\n\\\"},{\\\"score\\\":0.4429461359977722,\\\"imagesUrl\\\":[],\\\"documentName\\\":\\\"products/Web Fuzzer/advanced-configuration\\\",\\\"title\\\":\\\"\\\",\\\"content\\\":\\\"【文档名】:products/Web Fuzzer/advanced-configuration\\\\n【标题】:\\\\n【正文】:渲染 Fuzz默认情况下， 渲染 Fuzz 选项是打开并选中标准模式的。 三个模式的区别如下：关闭：关闭该选项之后，所有的 Fuzztag 就会失效。这在我们不需要Fuzz标签而且与某些模板引擎语法冲突的情况下非常有用。 标准：标准模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，每个 Fuzztag 必须严格符合 {{tagname1({{tagname2(param)}})}} 的格式。 兼容：兼容模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，在嵌套fuzztag的情况下，我们可以省略多余的花括号，例如： {{tagname1(tagname2(param))}} 。不修复长度默认情况下，Web Fuzzer会对请求包进行一些修复，其中也会对 Content-Length 请求头进行修复。\\\\n\\\"},{\\\"score\\\":0.4214630722999573,\\\"imagesUrl\\\":[],\\\"documentName\\\":\\\"docs/yakexamples/fuzz_tutorial\\\",\\\"title\\\":\\\"\\\",\\\"content\\\":\\\"【文档名】:docs/yakexamples/fuzz_tutorial\\\\n【标题】:\\\\n【正文】:Fuzzing is the art of automatic bug finding, and it’s role is to find software implementation faults, and identify them if possible.一般来说，在 Web 漏洞扫描中，我们也许并不知道一个参数应该测试什么。甚至我们能自动把需要测试漏洞的参数寻找到已经是一个很难的事儿了。往往在编写漏洞检测算法的时候，编写漏洞的同学会花大量的时间来完成基础设施的搭建，和编写基础的发包代码。在 Yak 中，作者并不希望用户把时间和经历都花在基础设施中，而是希望用户尽可能关注漏洞检测算法本身。在实际的使用过程中这种基础设施往往并没有合适的方式提供给用户，如果作为一家公司，这个可以作为公司员工遵循或者可以使用的框架之一，但是作为外部用户，能有这种研发体验其实是一件不容易的事情Web Fuzz 本质：针对 HTTP 数据包的 Fuzz本质上针对 HTTP 请求的 Fuzz 是 Web Fuzz 需要做的核心事项。再说具体一点，其实针对 HTTP Request 是整个测试的核心：\\\\n\\\"},{\\\"score\\\":0.41372963786125183,\\\"imagesUrl\\\":[],\\\"documentName\\\":\\\"products/Web Fuzzer/fuzz-other\\\",\\\"title\\\":\\\"\\\",\\\"content\\\":\\\"【文档名】:products/Web Fuzzer/fuzz-other\\\\n【标题】:\\\\n【正文】:编码与解码我们经常会有对请求包中的数据进行编码与解码的需求，这时候我们就可以使用 Web Fuzzer 的 编码与解码 功能。使用右键进行编码与解码在 Web Fuzzer 中，我们选中了一段数据后，可以右键对其进行编码与解码，在右键中内置了一些场景的编码与解码选项：当我们选择了其中一个选项后，会弹出一个窗口显示编码/解码后的效果，此时再点击替换内容，即可将原来的内容替换为编码/解码后的内容：* 使用悬浮框进行编码与解码当你在Web Fuzzer中鼠标点选了某个位置时，会弹出一个悬浮框，在这个悬浮框中你选择对选择的内容进行编码和解码。当我们选择了其中一个编码时，内容并不会被编码，而是使用了 fuzztag 来将其包裹，这会在 Web Fuzzer 真正发送请求前才将其编码。当我们选择解码时，会进行智能解码的方式，即会自动判断编码类型，然后进行解码，之后选择一个你认为正确的内容，可以对选中的内容进行替换：HTTP请求包变形这个功能可以对请求包进行一些变形，例如将GET请求变为POST请求，或者将POST请求变为GET请求等等。\\\\n\\\"},{\\\"score\\\":0.4066096544265747,\\\"imagesUrl\\\":[],\\\"documentName\\\":\\\"docs/yak-basic/cap8-3-port-n-service-scan\\\",\\\"title\\\":\\\"\\\",\\\"content\\\":\\\"【文档名】:docs/yak-basic/cap8-3-port-n-service-scan\\\\n【标题】:\\\\n【正文】:servicescan.excludeHosts(\\\\\\\"1.1.1.1\\\\\\\")|\\\\n||probeTimeout|设置单个请求探测超时时间为10秒 servicescan.probeTimeout(10)|\\\\n||proxy|设置代理 servicescan.proxy(\\\\\\\"http://127.0.0.1:8083\\\\\\\")|\\\\n||cache|设置启用缓存 servicescan.cache(true)|\\\\n||databaseCache|设置启用数据库缓存 servicescan.databaseCache(true)|\\\\n||webRule|设置启用用户自定义 web 规则|\\\\n||nmapRule|设置 nmap 规则文件|\\\\n||nmapRarityMax|nmap 规则筛选，通过稀有度 servicescan.nmapRarityMax(10)|\\\\n||maxProbes|设置每个服务最多主动发送的包数 servicescan.maxProbes(10)|\\\\n||maxProbesConcurrent|设置主动发包模式下的并发量 servicescan.maxProbesConcurrent(10)|\\\\n\\\"},{\\\"score\\\":0.40291067957878113,\\\"imagesUrl\\\":[],\\\"documentName\\\":\\\"Yaklab/wiki/CommonVulnerabilities/xss\\\",\\\"title\\\":\\\"\\\",\\\"content\\\":\\\"【文档名】:Yaklab/wiki/CommonVulnerabilities/xss\\\\n【标题】:\\\\n【正文】:sidebar_position: 10XSS漏洞反射型XSS漏洞描述：反射型XSS是一种非持久性的攻击，它指的是恶意攻击者往Web页面里插入恶意代码，当用户浏览该页之时，嵌入在Web页面中的HTML代码会被执行，从而达到恶意攻击用户的目的。这里插入的恶意代码并没有保存在目标网站，需要引诱用户点击一个链接，跳转到目标网站上的恶意页面来实施攻击漏洞案例：POST型反射XSS访问测试网站上的一个搜索框界面 在搜索框输入： alert(1) 点击查询时开启抓包自动将输入的 payload 拼接到发送的包中放包后成功触发弹窗GET型反射XSS直接拼接到含有漏洞URL中，例如：https://xxx.xxxx.xxx/search/foods.html?keyword= alert(1)存储型XSS漏洞描述：存储型XSS，也就是持久型XSS。攻击者上传的包含恶意js脚本的留言等信息被Web应用程序保存到数据库中，Web应用程序在生成新的页面的时候如果包含了该恶意js脚本，这样会导致所有访问该网页的浏览器解析执行该恶意脚本。这种攻击类型一般常见在博客、论坛等网站中漏洞案例：案例1\\\\n\\\"}]},\\\"query\\\":\\\"web\\\",\\\"aisearch\\\":\\\"web desarrollo aplicación internet sitio web tecnología online servidor cliente navegador programación diseño implementación seguridad optimización rendimiento experiencia usuario interactividad funcionalidad contenido digital plataforma virtual estructura frontend backend fullstack frameworks lenguajes protocolos HTTP HTTPS API RESTful integración bases datos escalabilidad mantenimiento compatibilidad adaptabilidad tendencias innovación estándares W3C accesibilidad SEO posicionamiento analytics monitorización hosting dominio CMS framework CSS HTML JavaScript PHP Python Ruby Java Node.js React Angular Vue.js Django Flask Laravel Symfony Expressjs configuración personalización automatización calidad control versiones Git gestión proyectos colaboración herramientas testing debugging deployment actualización mejora continua recursos tutoriales guías documentación casos estudio práctica profesional experto principiante aprendizaje formación certificación especialización talento empleo mercado trabajo freelance negocio emprendimiento startup éxito案例研究最佳实践专业人士初学者学习培训认证专业化人才就业市场工作自由职业商业创业初创公司成功案例研究最佳实践专业人士初学者学习培训认证专业化\\\"}\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":200,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "39",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":200}]",
      "outputNodeExecTime": "1086ms",
      "outputNodeId": "Retrieval_VohC",
      "outputNodeName": "知识库_1",
      "outputNodeStatus": "success",
      "outputNodeType": "Retrieval",
      "outputText": "{\"rewriteQuery\":\"web\",\"chunkList\":[{\"score\":0.4771150052547455,\"imagesUrl\":[],\"documentName\":\"articles/codec-and-yakit\",\"title\":\"\",\"content\":\"【文档名】:articles/codec-and-yakit\\n【标题】:\\n【正文】:Host: www.example.com\\nContent-Length: 9\\nkey=value关卡2：数据包修复web fuzzer会自动对HTTP数据进行一定程度的修复，以保证发送出的数据尽可能地能被服务器解析。不过有些时候可能需要自我控制如何修复数据包，也想看到数据包修复后地内容，这个时候就可以使用自定义变形数据包功能，编写一个修复数据包的插件。handle = func(origin /*string*/) {\\n// 这里使用的yaklang内置地数据包修复功能，可以修复Content-length等部分，用户也可以自定义一些自己地修复规则。\\nreturn string(poc.FixHTTPRequest(origin))\\n}比如下面一个有问题的数据包POST / HTTP/1.1\\nContent-Type: application/x-www-form-urlencoded\\nHost: www.example.com\\nContent-Length: 1\\nkey=value其CL显然不正确，调用修复数据地功能之后修复如下POST / HTTP/1.1\\n\"},{\"score\":0.4738810360431671,\"imagesUrl\":[],\"documentName\":\"api-manual/api/http\",\"title\":\"\",\"content\":\"【文档名】:api-manual/api/http\\n【标题】:\\n【正文】:http\\n\"},{\"score\":0.4429461359977722,\"imagesUrl\":[],\"documentName\":\"products/Web Fuzzer/advanced-configuration\",\"title\":\"\",\"content\":\"【文档名】:products/Web Fuzzer/advanced-configuration\\n【标题】:\\n【正文】:渲染 Fuzz默认情况下， 渲染 Fuzz 选项是打开并选中标准模式的。 三个模式的区别如下：关闭：关闭该选项之后，所有的 Fuzztag 就会失效。这在我们不需要Fuzz标签而且与某些模板引擎语法冲突的情况下非常有用。 标准：标准模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，每个 Fuzztag 必须严格符合 {{tagname1({{tagname2(param)}})}} 的格式。 兼容：兼容模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，在嵌套fuzztag的情况下，我们可以省略多余的花括号，例如： {{tagname1(tagname2(param))}} 。不修复长度默认情况下，Web Fuzzer会对请求包进行一些修复，其中也会对 Content-Length 请求头进行修复。\\n\"},{\"score\":0.4214630722999573,\"imagesUrl\":[],\"documentName\":\"docs/yakexamples/fuzz_tutorial\",\"title\":\"\",\"content\":\"【文档名】:docs/yakexamples/fuzz_tutorial\\n【标题】:\\n【正文】:Fuzzing is the art of automatic bug finding, and it’s role is to find software implementation faults, and identify them if possible.一般来说，在 Web 漏洞扫描中，我们也许并不知道一个参数应该测试什么。甚至我们能自动把需要测试漏洞的参数寻找到已经是一个很难的事儿了。往往在编写漏洞检测算法的时候，编写漏洞的同学会花大量的时间来完成基础设施的搭建，和编写基础的发包代码。在 Yak 中，作者并不希望用户把时间和经历都花在基础设施中，而是希望用户尽可能关注漏洞检测算法本身。在实际的使用过程中这种基础设施往往并没有合适的方式提供给用户，如果作为一家公司，这个可以作为公司员工遵循或者可以使用的框架之一，但是作为外部用户，能有这种研发体验其实是一件不容易的事情Web Fuzz 本质：针对 HTTP 数据包的 Fuzz本质上针对 HTTP 请求的 Fuzz 是 Web Fuzz 需要做的核心事项。再说具体一点，其实针对 HTTP Request 是整个测试的核心：\\n\"},{\"score\":0.41372963786125183,\"imagesUrl\":[],\"documentName\":\"products/Web Fuzzer/fuzz-other\",\"title\":\"\",\"content\":\"【文档名】:products/Web Fuzzer/fuzz-other\\n【标题】:\\n【正文】:编码与解码我们经常会有对请求包中的数据进行编码与解码的需求，这时候我们就可以使用 Web Fuzzer 的 编码与解码 功能。使用右键进行编码与解码在 Web Fuzzer 中，我们选中了一段数据后，可以右键对其进行编码与解码，在右键中内置了一些场景的编码与解码选项：当我们选择了其中一个选项后，会弹出一个窗口显示编码/解码后的效果，此时再点击替换内容，即可将原来的内容替换为编码/解码后的内容：* 使用悬浮框进行编码与解码当你在Web Fuzzer中鼠标点选了某个位置时，会弹出一个悬浮框，在这个悬浮框中你选择对选择的内容进行编码和解码。当我们选择了其中一个编码时，内容并不会被编码，而是使用了 fuzztag 来将其包裹，这会在 Web Fuzzer 真正发送请求前才将其编码。当我们选择解码时，会进行智能解码的方式，即会自动判断编码类型，然后进行解码，之后选择一个你认为正确的内容，可以对选中的内容进行替换：HTTP请求包变形这个功能可以对请求包进行一些变形，例如将GET请求变为POST请求，或者将POST请求变为GET请求等等。\\n\"},{\"score\":0.4066096544265747,\"imagesUrl\":[],\"documentName\":\"docs/yak-basic/cap8-3-port-n-service-scan\",\"title\":\"\",\"content\":\"【文档名】:docs/yak-basic/cap8-3-port-n-service-scan\\n【标题】:\\n【正文】:servicescan.excludeHosts(\\\"1.1.1.1\\\")|\\n||probeTimeout|设置单个请求探测超时时间为10秒 servicescan.probeTimeout(10)|\\n||proxy|设置代理 servicescan.proxy(\\\"http://127.0.0.1:8083\\\")|\\n||cache|设置启用缓存 servicescan.cache(true)|\\n||databaseCache|设置启用数据库缓存 servicescan.databaseCache(true)|\\n||webRule|设置启用用户自定义 web 规则|\\n||nmapRule|设置 nmap 规则文件|\\n||nmapRarityMax|nmap 规则筛选，通过稀有度 servicescan.nmapRarityMax(10)|\\n||maxProbes|设置每个服务最多主动发送的包数 servicescan.maxProbes(10)|\\n||maxProbesConcurrent|设置主动发包模式下的并发量 servicescan.maxProbesConcurrent(10)|\\n\"},{\"score\":0.40291067957878113,\"imagesUrl\":[],\"documentName\":\"Yaklab/wiki/CommonVulnerabilities/xss\",\"title\":\"\",\"content\":\"【文档名】:Yaklab/wiki/CommonVulnerabilities/xss\\n【标题】:\\n【正文】:sidebar_position: 10XSS漏洞反射型XSS漏洞描述：反射型XSS是一种非持久性的攻击，它指的是恶意攻击者往Web页面里插入恶意代码，当用户浏览该页之时，嵌入在Web页面中的HTML代码会被执行，从而达到恶意攻击用户的目的。这里插入的恶意代码并没有保存在目标网站，需要引诱用户点击一个链接，跳转到目标网站上的恶意页面来实施攻击漏洞案例：POST型反射XSS访问测试网站上的一个搜索框界面 在搜索框输入： alert(1) 点击查询时开启抓包自动将输入的 payload 拼接到发送的包中放包后成功触发弹窗GET型反射XSS直接拼接到含有漏洞URL中，例如：https://xxx.xxxx.xxx/search/foods.html?keyword= alert(1)存储型XSS漏洞描述：存储型XSS，也就是持久型XSS。攻击者上传的包含恶意js脚本的留言等信息被Web应用程序保存到数据库中，Web应用程序在生成新的页面的时候如果包含了该恶意js脚本，这样会导致所有访问该网页的浏览器解析执行该恶意脚本。这种攻击类型一般常见在博客、论坛等网站中漏洞案例：案例1\\n\"}]}"
    },
    {
      "dataRaw": "{\"output\":{\"thoughts\":[{\"response\":\"{\\\"nodeName\\\":\\\"开始\\\",\\\"nodeType\\\":\\\"Start\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Start_bYxoRU\\\",\\\"nodeExecTime\\\":\\\"0ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"大模型_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"\\\\\\\"}\\\",\\\"nodeType\\\":\\\"LLM\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"LLM_XNwa\\\",\\\"nodeExecTime\\\":\\\"9072ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"知识库_1\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"rewriteQuery\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"web\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"chunkList\\\\\\\\\\\\\\\":[{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4771150052547455,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"articles/codec-and-yakit\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:articles/codec-and-yakit\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:Host: www.example.com\\\\\\\\\\\\\\\\nContent-Length: 9\\\\\\\\\\\\\\\\nkey=value关卡2：数据包修复web fuzzer会自动对HTTP数据进行一定程度的修复，以保证发送出的数据尽可能地能被服务器解析。不过有些时候可能需要自我控制如何修复数据包，也想看到数据包修复后地内容，这个时候就可以使用自定义变形数据包功能，编写一个修复数据包的插件。handle = func(origin /*string*/) {\\\\\\\\\\\\\\\\n// 这里使用的yaklang内置地数据包修复功能，可以修复Content-length等部分，用户也可以自定义一些自己地修复规则。\\\\\\\\\\\\\\\\nreturn string(poc.FixHTTPRequest(origin))\\\\\\\\\\\\\\\\n}比如下面一个有问题的数据包POST / HTTP/1.1\\\\\\\\\\\\\\\\nContent-Type: application/x-www-form-urlencoded\\\\\\\\\\\\\\\\nHost: www.example.com\\\\\\\\\\\\\\\\nContent-Length: 1\\\\\\\\\\\\\\\\nkey=value其CL显然不正确，调用修复数据地功能之后修复如下POST / HTTP/1.1\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4738810360431671,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"api-manual/api/http\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:api-manual/api/http\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:http\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4429461359977722,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"products/Web Fuzzer/advanced-configuration\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:products/Web Fuzzer/advanced-configuration\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:渲染 Fuzz默认情况下， 渲染 Fuzz 选项是打开并选中标准模式的。 三个模式的区别如下：关闭：关闭该选项之后，所有的 Fuzztag 就会失效。这在我们不需要Fuzz标签而且与某些模板引擎语法冲突的情况下非常有用。 标准：标准模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，每个 Fuzztag 必须严格符合 {{tagname1({{tagname2(param)}})}} 的格式。 兼容：兼容模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，在嵌套fuzztag的情况下，我们可以省略多余的花括号，例如： {{tagname1(tagname2(param))}} 。不修复长度默认情况下，Web Fuzzer会对请求包进行一些修复，其中也会对 Content-Length 请求头进行修复。\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4214630722999573,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"docs/yakexamples/fuzz_tutorial\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:docs/yakexamples/fuzz_tutorial\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:Fuzzing is the art of automatic bug finding, and it’s role is to find software implementation faults, and identify them if possible.一般来说，在 Web 漏洞扫描中，我们也许并不知道一个参数应该测试什么。甚至我们能自动把需要测试漏洞的参数寻找到已经是一个很难的事儿了。往往在编写漏洞检测算法的时候，编写漏洞的同学会花大量的时间来完成基础设施的搭建，和编写基础的发包代码。在 Yak 中，作者并不希望用户把时间和经历都花在基础设施中，而是希望用户尽可能关注漏洞检测算法本身。在实际的使用过程中这种基础设施往往并没有合适的方式提供给用户，如果作为一家公司，这个可以作为公司员工遵循或者可以使用的框架之一，但是作为外部用户，能有这种研发体验其实是一件不容易的事情Web Fuzz 本质：针对 HTTP 数据包的 Fuzz本质上针对 HTTP 请求的 Fuzz 是 Web Fuzz 需要做的核心事项。再说具体一点，其实针对 HTTP Request 是整个测试的核心：\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.41372963786125183,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"products/Web Fuzzer/fuzz-other\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:products/Web Fuzzer/fuzz-other\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:编码与解码我们经常会有对请求包中的数据进行编码与解码的需求，这时候我们就可以使用 Web Fuzzer 的 编码与解码 功能。使用右键进行编码与解码在 Web Fuzzer 中，我们选中了一段数据后，可以右键对其进行编码与解码，在右键中内置了一些场景的编码与解码选项：当我们选择了其中一个选项后，会弹出一个窗口显示编码/解码后的效果，此时再点击替换内容，即可将原来的内容替换为编码/解码后的内容：* 使用悬浮框进行编码与解码当你在Web Fuzzer中鼠标点选了某个位置时，会弹出一个悬浮框，在这个悬浮框中你选择对选择的内容进行编码和解码。当我们选择了其中一个编码时，内容并不会被编码，而是使用了 fuzztag 来将其包裹，这会在 Web Fuzzer 真正发送请求前才将其编码。当我们选择解码时，会进行智能解码的方式，即会自动判断编码类型，然后进行解码，之后选择一个你认为正确的内容，可以对选中的内容进行替换：HTTP请求包变形这个功能可以对请求包进行一些变形，例如将GET请求变为POST请求，或者将POST请求变为GET请求等等。\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4066096544265747,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"docs/yak-basic/cap8-3-port-n-service-scan\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:docs/yak-basic/cap8-3-port-n-service-scan\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:servicescan.excludeHosts(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1.1.1.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")|\\\\\\\\\\\\\\\\n||probeTimeout|设置单个请求探测超时时间为10秒 servicescan.probeTimeout(10)|\\\\\\\\\\\\\\\\n||proxy|设置代理 servicescan.proxy(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"http://127.0.0.1:8083\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")|\\\\\\\\\\\\\\\\n||cache|设置启用缓存 servicescan.cache(true)|\\\\\\\\\\\\\\\\n||databaseCache|设置启用数据库缓存 servicescan.databaseCache(true)|\\\\\\\\\\\\\\\\n||webRule|设置启用用户自定义 web 规则|\\\\\\\\\\\\\\\\n||nmapRule|设置 nmap 规则文件|\\\\\\\\\\\\\\\\n||nmapRarityMax|nmap 规则筛选，通过稀有度 servicescan.nmapRarityMax(10)|\\\\\\\\\\\\\\\\n||maxProbes|设置每个服务最多主动发送的包数 servicescan.maxProbes(10)|\\\\\\\\\\\\\\\\n||maxProbesConcurrent|设置主动发包模式下的并发量 servicescan.maxProbesConcurrent(10)|\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.40291067957878113,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Yaklab/wiki/CommonVulnerabilities/xss\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:Yaklab/wiki/CommonVulnerabilities/xss\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:sidebar_position: 10XSS漏洞反射型XSS漏洞描述：反射型XSS是一种非持久性的攻击，它指的是恶意攻击者往Web页面里插入恶意代码，当用户浏览该页之时，嵌入在Web页面中的HTML代码会被执行，从而达到恶意攻击用户的目的。这里插入的恶意代码并没有保存在目标网站，需要引诱用户点击一个链接，跳转到目标网站上的恶意页面来实施攻击漏洞案例：POST型反射XSS访问测试网站上的一个搜索框界面 在搜索框输入： alert(1) 点击查询时开启抓包自动将输入的 payload 拼接到发送的包中放包后成功触发弹窗GET型反射XSS直接拼接到含有漏洞URL中，例如：https://xxx.xxxx.xxx/search/foods.html?keyword= alert(1)存储型XSS漏洞描述：存储型XSS，也就是持久型XSS。攻击者上传的包含恶意js脚本的留言等信息被Web应用程序保存到数据库中，Web应用程序在生成新的页面的时候如果包含了该恶意js脚本，这样会导致所有访问该网页的浏览器解析执行该恶意脚本。这种攻击类型一般常见在博客、论坛等网站中漏洞案例：案例1\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"}]}\\\\\\\"}\\\",\\\"nodeType\\\":\\\"Retrieval\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"Retrieval_VohC\\\",\\\"nodeExecTime\\\":\\\"1086ms\\\"}\"},{\"response\":\"{\\\"nodeName\\\":\\\"结束\\\",\\\"nodeResult\\\":\\\"{\\\\\\\"result\\\\\\\":\\\\\\\"{\\\\\\\\\\\\\\\"records\\\\\\\\\\\\\\\":{\\\\\\\\\\\\\\\"rewriteQuery\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"web\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"chunkList\\\\\\\\\\\\\\\":[{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4771150052547455,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"articles/codec-and-yakit\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:articles/codec-and-yakit\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:Host: www.example.com\\\\\\\\\\\\\\\\nContent-Length: 9\\\\\\\\\\\\\\\\nkey=value关卡2：数据包修复web fuzzer会自动对HTTP数据进行一定程度的修复，以保证发送出的数据尽可能地能被服务器解析。不过有些时候可能需要自我控制如何修复数据包，也想看到数据包修复后地内容，这个时候就可以使用自定义变形数据包功能，编写一个修复数据包的插件。handle = func(origin /*string*/) {\\\\\\\\\\\\\\\\n// 这里使用的yaklang内置地数据包修复功能，可以修复Content-length等部分，用户也可以自定义一些自己地修复规则。\\\\\\\\\\\\\\\\nreturn string(poc.FixHTTPRequest(origin))\\\\\\\\\\\\\\\\n}比如下面一个有问题的数据包POST / HTTP/1.1\\\\\\\\\\\\\\\\nContent-Type: application/x-www-form-urlencoded\\\\\\\\\\\\\\\\nHost: www.example.com\\\\\\\\\\\\\\\\nContent-Length: 1\\\\\\\\\\\\\\\\nkey=value其CL显然不正确，调用修复数据地功能之后修复如下POST / HTTP/1.1\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4738810360431671,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"api-manual/api/http\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:api-manual/api/http\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:http\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4429461359977722,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"products/Web Fuzzer/advanced-configuration\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:products/Web Fuzzer/advanced-configuration\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:渲染 Fuzz默认情况下， 渲染 Fuzz 选项是打开并选中标准模式的。 三个模式的区别如下：关闭：关闭该选项之后，所有的 Fuzztag 就会失效。这在我们不需要Fuzz标签而且与某些模板引擎语法冲突的情况下非常有用。 标准：标准模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，每个 Fuzztag 必须严格符合 {{tagname1({{tagname2(param)}})}} 的格式。 兼容：兼容模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，在嵌套fuzztag的情况下，我们可以省略多余的花括号，例如： {{tagname1(tagname2(param))}} 。不修复长度默认情况下，Web Fuzzer会对请求包进行一些修复，其中也会对 Content-Length 请求头进行修复。\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4214630722999573,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"docs/yakexamples/fuzz_tutorial\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:docs/yakexamples/fuzz_tutorial\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:Fuzzing is the art of automatic bug finding, and it’s role is to find software implementation faults, and identify them if possible.一般来说，在 Web 漏洞扫描中，我们也许并不知道一个参数应该测试什么。甚至我们能自动把需要测试漏洞的参数寻找到已经是一个很难的事儿了。往往在编写漏洞检测算法的时候，编写漏洞的同学会花大量的时间来完成基础设施的搭建，和编写基础的发包代码。在 Yak 中，作者并不希望用户把时间和经历都花在基础设施中，而是希望用户尽可能关注漏洞检测算法本身。在实际的使用过程中这种基础设施往往并没有合适的方式提供给用户，如果作为一家公司，这个可以作为公司员工遵循或者可以使用的框架之一，但是作为外部用户，能有这种研发体验其实是一件不容易的事情Web Fuzz 本质：针对 HTTP 数据包的 Fuzz本质上针对 HTTP 请求的 Fuzz 是 Web Fuzz 需要做的核心事项。再说具体一点，其实针对 HTTP Request 是整个测试的核心：\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.41372963786125183,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"products/Web Fuzzer/fuzz-other\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:products/Web Fuzzer/fuzz-other\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:编码与解码我们经常会有对请求包中的数据进行编码与解码的需求，这时候我们就可以使用 Web Fuzzer 的 编码与解码 功能。使用右键进行编码与解码在 Web Fuzzer 中，我们选中了一段数据后，可以右键对其进行编码与解码，在右键中内置了一些场景的编码与解码选项：当我们选择了其中一个选项后，会弹出一个窗口显示编码/解码后的效果，此时再点击替换内容，即可将原来的内容替换为编码/解码后的内容：* 使用悬浮框进行编码与解码当你在Web Fuzzer中鼠标点选了某个位置时，会弹出一个悬浮框，在这个悬浮框中你选择对选择的内容进行编码和解码。当我们选择了其中一个编码时，内容并不会被编码，而是使用了 fuzztag 来将其包裹，这会在 Web Fuzzer 真正发送请求前才将其编码。当我们选择解码时，会进行智能解码的方式，即会自动判断编码类型，然后进行解码，之后选择一个你认为正确的内容，可以对选中的内容进行替换：HTTP请求包变形这个功能可以对请求包进行一些变形，例如将GET请求变为POST请求，或者将POST请求变为GET请求等等。\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.4066096544265747,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"docs/yak-basic/cap8-3-port-n-service-scan\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:docs/yak-basic/cap8-3-port-n-service-scan\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:servicescan.excludeHosts(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"1.1.1.1\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")|\\\\\\\\\\\\\\\\n||probeTimeout|设置单个请求探测超时时间为10秒 servicescan.probeTimeout(10)|\\\\\\\\\\\\\\\\n||proxy|设置代理 servicescan.proxy(\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\"http://127.0.0.1:8083\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\")|\\\\\\\\\\\\\\\\n||cache|设置启用缓存 servicescan.cache(true)|\\\\\\\\\\\\\\\\n||databaseCache|设置启用数据库缓存 servicescan.databaseCache(true)|\\\\\\\\\\\\\\\\n||webRule|设置启用用户自定义 web 规则|\\\\\\\\\\\\\\\\n||nmapRule|设置 nmap 规则文件|\\\\\\\\\\\\\\\\n||nmapRarityMax|nmap 规则筛选，通过稀有度 servicescan.nmapRarityMax(10)|\\\\\\\\\\\\\\\\n||maxProbes|设置每个服务最多主动发送的包数 servicescan.maxProbes(10)|\\\\\\\\\\\\\\\\n||maxProbesConcurrent|设置主动发包模式下的并发量 servicescan.maxProbesConcurrent(10)|\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"},{\\\\\\\\\\\\\\\"score\\\\\\\\\\\\\\\":0.40291067957878113,\\\\\\\\\\\\\\\"imagesUrl\\\\\\\\\\\\\\\":[],\\\\\\\\\\\\\\\"documentName\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"Yaklab/wiki/CommonVulnerabilities/xss\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"title\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"content\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"【文档名】:Yaklab/wiki/CommonVulnerabilities/xss\\\\\\\\\\\\\\\\n【标题】:\\\\\\\\\\\\\\\\n【正文】:sidebar_position: 10XSS漏洞反射型XSS漏洞描述：反射型XSS是一种非持久性的攻击，它指的是恶意攻击者往Web页面里插入恶意代码，当用户浏览该页之时，嵌入在Web页面中的HTML代码会被执行，从而达到恶意攻击用户的目的。这里插入的恶意代码并没有保存在目标网站，需要引诱用户点击一个链接，跳转到目标网站上的恶意页面来实施攻击漏洞案例：POST型反射XSS访问测试网站上的一个搜索框界面 在搜索框输入： alert(1) 点击查询时开启抓包自动将输入的 payload 拼接到发送的包中放包后成功触发弹窗GET型反射XSS直接拼接到含有漏洞URL中，例如：https://xxx.xxxx.xxx/search/foods.html?keyword= alert(1)存储型XSS漏洞描述：存储型XSS，也就是持久型XSS。攻击者上传的包含恶意js脚本的留言等信息被Web应用程序保存到数据库中，Web应用程序在生成新的页面的时候如果包含了该恶意js脚本，这样会导致所有访问该网页的浏览器解析执行该恶意脚本。这种攻击类型一般常见在博客、论坛等网站中漏洞案例：案例1\\\\\\\\\\\\\\\\n\\\\\\\\\\\\\\\"}]},\\\\\\\\\\\\\\\"query\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"web\\\\\\\\\\\\\\\",\\\\\\\\\\\\\\\"aisearch\\\\\\\\\\\\\\\":\\\\\\\\\\\\\\\"web desarrollo aplicación internet sitio web tecnología online servidor cliente navegador programación diseño implementación seguridad optimización rendimiento experiencia usuario interactividad funcionalidad contenido digital plataforma virtual estructura frontend backend fullstack frameworks lenguajes protocolos HTTP HTTPS API RESTful integración bases datos escalabilidad mantenimiento compatibilidad adaptabilidad tendencias innovación estándares W3C accesibilidad SEO posicionamiento analytics monitorización hosting dominio CMS framework CSS HTML JavaScript PHP Python Ruby Java Node.js React Angular Vue.js Django Flask Laravel Symfony Expressjs configuración personalización automatización calidad control versiones Git gestión proyectos colaboración herramientas testing debugging deployment actualización mejora continua recursos tutoriales guías documentación casos estudio práctica profesional experto principiante aprendizaje formación certificación especialización talento empleo mercado trabajo freelance negocio emprendimiento startup éxito案例研究最佳实践专业人士初学者学习培训认证专业化人才就业市场工作自由职业商业创业初创公司成功案例研究最佳实践专业人士初学者学习培训认证专业化\\\\\\\\\\\\\\\"}\\\\\\\"}\\\",\\\"nodeType\\\":\\\"End\\\",\\\"nodeStatus\\\":\\\"success\\\",\\\"nodeId\\\":\\\"End_DrQn7F\\\",\\\"nodeExecTime\\\":\\\"5ms\\\"}\"}],\"session_id\":\"dd4bd7fc75b44f7a92bf4da3d9cb0249\",\"finish_reason\":\"stop\",\"text\":\"{\\\"records\\\":{\\\"rewriteQuery\\\":\\\"web\\\",\\\"chunkList\\\":[{\\\"score\\\":0.4771150052547455,\\\"imagesUrl\\\":[],\\\"documentName\\\":\\\"articles/codec-and-yakit\\\",\\\"title\\\":\\\"\\\",\\\"content\\\":\\\"【文档名】:articles/codec-and-yakit\\\\n【标题】:\\\\n【正文】:Host: www.example.com\\\\nContent-Length: 9\\\\nkey=value关卡2：数据包修复web fuzzer会自动对HTTP数据进行一定程度的修复，以保证发送出的数据尽可能地能被服务器解析。不过有些时候可能需要自我控制如何修复数据包，也想看到数据包修复后地内容，这个时候就可以使用自定义变形数据包功能，编写一个修复数据包的插件。handle = func(origin /*string*/) {\\\\n// 这里使用的yaklang内置地数据包修复功能，可以修复Content-length等部分，用户也可以自定义一些自己地修复规则。\\\\nreturn string(poc.FixHTTPRequest(origin))\\\\n}比如下面一个有问题的数据包POST / HTTP/1.1\\\\nContent-Type: application/x-www-form-urlencoded\\\\nHost: www.example.com\\\\nContent-Length: 1\\\\nkey=value其CL显然不正确，调用修复数据地功能之后修复如下POST / HTTP/1.1\\\\n\\\"},{\\\"score\\\":0.4738810360431671,\\\"imagesUrl\\\":[],\\\"documentName\\\":\\\"api-manual/api/http\\\",\\\"title\\\":\\\"\\\",\\\"content\\\":\\\"【文档名】:api-manual/api/http\\\\n【标题】:\\\\n【正文】:http\\\\n\\\"},{\\\"score\\\":0.4429461359977722,\\\"imagesUrl\\\":[],\\\"documentName\\\":\\\"products/Web Fuzzer/advanced-configuration\\\",\\\"title\\\":\\\"\\\",\\\"content\\\":\\\"【文档名】:products/Web Fuzzer/advanced-configuration\\\\n【标题】:\\\\n【正文】:渲染 Fuzz默认情况下， 渲染 Fuzz 选项是打开并选中标准模式的。 三个模式的区别如下：关闭：关闭该选项之后，所有的 Fuzztag 就会失效。这在我们不需要Fuzz标签而且与某些模板引擎语法冲突的情况下非常有用。 标准：标准模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，每个 Fuzztag 必须严格符合 {{tagname1({{tagname2(param)}})}} 的格式。 兼容：兼容模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，在嵌套fuzztag的情况下，我们可以省略多余的花括号，例如： {{tagname1(tagname2(param))}} 。不修复长度默认情况下，Web Fuzzer会对请求包进行一些修复，其中也会对 Content-Length 请求头进行修复。\\\\n\\\"},{\\\"score\\\":0.4214630722999573,\\\"imagesUrl\\\":[],\\\"documentName\\\":\\\"docs/yakexamples/fuzz_tutorial\\\",\\\"title\\\":\\\"\\\",\\\"content\\\":\\\"【文档名】:docs/yakexamples/fuzz_tutorial\\\\n【标题】:\\\\n【正文】:Fuzzing is the art of automatic bug finding, and it’s role is to find software implementation faults, and identify them if possible.一般来说，在 Web 漏洞扫描中，我们也许并不知道一个参数应该测试什么。甚至我们能自动把需要测试漏洞的参数寻找到已经是一个很难的事儿了。往往在编写漏洞检测算法的时候，编写漏洞的同学会花大量的时间来完成基础设施的搭建，和编写基础的发包代码。在 Yak 中，作者并不希望用户把时间和经历都花在基础设施中，而是希望用户尽可能关注漏洞检测算法本身。在实际的使用过程中这种基础设施往往并没有合适的方式提供给用户，如果作为一家公司，这个可以作为公司员工遵循或者可以使用的框架之一，但是作为外部用户，能有这种研发体验其实是一件不容易的事情Web Fuzz 本质：针对 HTTP 数据包的 Fuzz本质上针对 HTTP 请求的 Fuzz 是 Web Fuzz 需要做的核心事项。再说具体一点，其实针对 HTTP Request 是整个测试的核心：\\\\n\\\"},{\\\"score\\\":0.41372963786125183,\\\"imagesUrl\\\":[],\\\"documentName\\\":\\\"products/Web Fuzzer/fuzz-other\\\",\\\"title\\\":\\\"\\\",\\\"content\\\":\\\"【文档名】:products/Web Fuzzer/fuzz-other\\\\n【标题】:\\\\n【正文】:编码与解码我们经常会有对请求包中的数据进行编码与解码的需求，这时候我们就可以使用 Web Fuzzer 的 编码与解码 功能。使用右键进行编码与解码在 Web Fuzzer 中，我们选中了一段数据后，可以右键对其进行编码与解码，在右键中内置了一些场景的编码与解码选项：当我们选择了其中一个选项后，会弹出一个窗口显示编码/解码后的效果，此时再点击替换内容，即可将原来的内容替换为编码/解码后的内容：* 使用悬浮框进行编码与解码当你在Web Fuzzer中鼠标点选了某个位置时，会弹出一个悬浮框，在这个悬浮框中你选择对选择的内容进行编码和解码。当我们选择了其中一个编码时，内容并不会被编码，而是使用了 fuzztag 来将其包裹，这会在 Web Fuzzer 真正发送请求前才将其编码。当我们选择解码时，会进行智能解码的方式，即会自动判断编码类型，然后进行解码，之后选择一个你认为正确的内容，可以对选中的内容进行替换：HTTP请求包变形这个功能可以对请求包进行一些变形，例如将GET请求变为POST请求，或者将POST请求变为GET请求等等。\\\\n\\\"},{\\\"score\\\":0.4066096544265747,\\\"imagesUrl\\\":[],\\\"documentName\\\":\\\"docs/yak-basic/cap8-3-port-n-service-scan\\\",\\\"title\\\":\\\"\\\",\\\"content\\\":\\\"【文档名】:docs/yak-basic/cap8-3-port-n-service-scan\\\\n【标题】:\\\\n【正文】:servicescan.excludeHosts(\\\\\\\"1.1.1.1\\\\\\\")|\\\\n||probeTimeout|设置单个请求探测超时时间为10秒 servicescan.probeTimeout(10)|\\\\n||proxy|设置代理 servicescan.proxy(\\\\\\\"http://127.0.0.1:8083\\\\\\\")|\\\\n||cache|设置启用缓存 servicescan.cache(true)|\\\\n||databaseCache|设置启用数据库缓存 servicescan.databaseCache(true)|\\\\n||webRule|设置启用用户自定义 web 规则|\\\\n||nmapRule|设置 nmap 规则文件|\\\\n||nmapRarityMax|nmap 规则筛选，通过稀有度 servicescan.nmapRarityMax(10)|\\\\n||maxProbes|设置每个服务最多主动发送的包数 servicescan.maxProbes(10)|\\\\n||maxProbesConcurrent|设置主动发包模式下的并发量 servicescan.maxProbesConcurrent(10)|\\\\n\\\"},{\\\"score\\\":0.40291067957878113,\\\"imagesUrl\\\":[],\\\"documentName\\\":\\\"Yaklab/wiki/CommonVulnerabilities/xss\\\",\\\"title\\\":\\\"\\\",\\\"content\\\":\\\"【文档名】:Yaklab/wiki/CommonVulnerabilities/xss\\\\n【标题】:\\\\n【正文】:sidebar_position: 10XSS漏洞反射型XSS漏洞描述：反射型XSS是一种非持久性的攻击，它指的是恶意攻击者往Web页面里插入恶意代码，当用户浏览该页之时，嵌入在Web页面中的HTML代码会被执行，从而达到恶意攻击用户的目的。这里插入的恶意代码并没有保存在目标网站，需要引诱用户点击一个链接，跳转到目标网站上的恶意页面来实施攻击漏洞案例：POST型反射XSS访问测试网站上的一个搜索框界面 在搜索框输入： alert(1) 点击查询时开启抓包自动将输入的 payload 拼接到发送的包中放包后成功触发弹窗GET型反射XSS直接拼接到含有漏洞URL中，例如：https://xxx.xxxx.xxx/search/foods.html?keyword= alert(1)存储型XSS漏洞描述：存储型XSS，也就是持久型XSS。攻击者上传的包含恶意js脚本的留言等信息被Web应用程序保存到数据库中，Web应用程序在生成新的页面的时候如果包含了该恶意js脚本，这样会导致所有访问该网页的浏览器解析执行该恶意脚本。这种攻击类型一般常见在博客、论坛等网站中漏洞案例：案例1\\\\n\\\"}]},\\\"query\\\":\\\"web\\\",\\\"aisearch\\\":\\\"web desarrollo aplicación internet sitio web tecnología online servidor cliente navegador programación diseño implementación seguridad optimización rendimiento experiencia usuario interactividad funcionalidad contenido digital plataforma virtual estructura frontend backend fullstack frameworks lenguajes protocolos HTTP HTTPS API RESTful integración bases datos escalabilidad mantenimiento compatibilidad adaptabilidad tendencias innovación estándares W3C accesibilidad SEO posicionamiento analytics monitorización hosting dominio CMS framework CSS HTML JavaScript PHP Python Ruby Java Node.js React Angular Vue.js Django Flask Laravel Symfony Expressjs configuración personalización automatización calidad control versiones Git gestión proyectos colaboración herramientas testing debugging deployment actualización mejora continua recursos tutoriales guías documentación casos estudio práctica profesional experto principiante aprendizaje formación certificación especialización talento empleo mercado trabajo freelance negocio emprendimiento startup éxito案例研究最佳实践专业人士初学者学习培训认证专业化人才就业市场工作自由职业商业创业初创公司成功案例研究最佳实践专业人士初学者学习培训认证专业化\\\"}\"},\"usage\":{\"models\":[{\"input_tokens\":93,\"output_tokens\":200,\"model_id\":\"qwen-max-latest\"}]},\"request_id\":\"192fa316-136b-9dac-8a7e-d22d4fe0a3c7\"}",
      "dataSourceType": "dashscope",
      "event": "result",
      "haveUsage": true,
      "id": "39",
      "isParsed": true,
      "modelUsage": "[{\"Model\":\"qwen-max-latest\",\"InputToken\":93,\"OutputToken\":200}]",
      "outputNodeExecTime": "5ms",
      "outputNodeId": "End_DrQn7F",
      "outputNodeName": "结束",
      "outputNodeStatus": "success",
      "outputNodeType": "End",
      "outputText": "{\"records\":{\"rewriteQuery\":\"web\",\"chunkList\":[{\"score\":0.4771150052547455,\"imagesUrl\":[],\"documentName\":\"articles/codec-and-yakit\",\"title\":\"\",\"content\":\"【文档名】:articles/codec-and-yakit\\n【标题】:\\n【正文】:Host: www.example.com\\nContent-Length: 9\\nkey=value关卡2：数据包修复web fuzzer会自动对HTTP数据进行一定程度的修复，以保证发送出的数据尽可能地能被服务器解析。不过有些时候可能需要自我控制如何修复数据包，也想看到数据包修复后地内容，这个时候就可以使用自定义变形数据包功能，编写一个修复数据包的插件。handle = func(origin /*string*/) {\\n// 这里使用的yaklang内置地数据包修复功能，可以修复Content-length等部分，用户也可以自定义一些自己地修复规则。\\nreturn string(poc.FixHTTPRequest(origin))\\n}比如下面一个有问题的数据包POST / HTTP/1.1\\nContent-Type: application/x-www-form-urlencoded\\nHost: www.example.com\\nContent-Length: 1\\nkey=value其CL显然不正确，调用修复数据地功能之后修复如下POST / HTTP/1.1\\n\"},{\"score\":0.4738810360431671,\"imagesUrl\":[],\"documentName\":\"api-manual/api/http\",\"title\":\"\",\"content\":\"【文档名】:api-manual/api/http\\n【标题】:\\n【正文】:http\\n\"},{\"score\":0.4429461359977722,\"imagesUrl\":[],\"documentName\":\"products/Web Fuzzer/advanced-configuration\",\"title\":\"\",\"content\":\"【文档名】:products/Web Fuzzer/advanced-configuration\\n【标题】:\\n【正文】:渲染 Fuzz默认情况下， 渲染 Fuzz 选项是打开并选中标准模式的。 三个模式的区别如下：关闭：关闭该选项之后，所有的 Fuzztag 就会失效。这在我们不需要Fuzz标签而且与某些模板引擎语法冲突的情况下非常有用。 标准：标准模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，每个 Fuzztag 必须严格符合 {{tagname1({{tagname2(param)}})}} 的格式。 兼容：兼容模式下，Web Fuzzer 会对请求包中的Fuzz标签进行渲染，在嵌套fuzztag的情况下，我们可以省略多余的花括号，例如： {{tagname1(tagname2(param))}} 。不修复长度默认情况下，Web Fuzzer会对请求包进行一些修复，其中也会对 Content-Length 请求头进行修复。\\n\"},{\"score\":0.4214630722999573,\"imagesUrl\":[],\"documentName\":\"docs/yakexamples/fuzz_tutorial\",\"title\":\"\",\"content\":\"【文档名】:docs/yakexamples/fuzz_tutorial\\n【标题】:\\n【正文】:Fuzzing is the art of automatic bug finding, and it’s role is to find software implementation faults, and identify them if possible.一般来说，在 Web 漏洞扫描中，我们也许并不知道一个参数应该测试什么。甚至我们能自动把需要测试漏洞的参数寻找到已经是一个很难的事儿了。往往在编写漏洞检测算法的时候，编写漏洞的同学会花大量的时间来完成基础设施的搭建，和编写基础的发包代码。在 Yak 中，作者并不希望用户把时间和经历都花在基础设施中，而是希望用户尽可能关注漏洞检测算法本身。在实际的使用过程中这种基础设施往往并没有合适的方式提供给用户，如果作为一家公司，这个可以作为公司员工遵循或者可以使用的框架之一，但是作为外部用户，能有这种研发体验其实是一件不容易的事情Web Fuzz 本质：针对 HTTP 数据包的 Fuzz本质上针对 HTTP 请求的 Fuzz 是 Web Fuzz 需要做的核心事项。再说具体一点，其实针对 HTTP Request 是整个测试的核心：\\n\"},{\"score\":0.41372963786125183,\"imagesUrl\":[],\"documentName\":\"products/Web Fuzzer/fuzz-other\",\"title\":\"\",\"content\":\"【文档名】:products/Web Fuzzer/fuzz-other\\n【标题】:\\n【正文】:编码与解码我们经常会有对请求包中的数据进行编码与解码的需求，这时候我们就可以使用 Web Fuzzer 的 编码与解码 功能。使用右键进行编码与解码在 Web Fuzzer 中，我们选中了一段数据后，可以右键对其进行编码与解码，在右键中内置了一些场景的编码与解码选项：当我们选择了其中一个选项后，会弹出一个窗口显示编码/解码后的效果，此时再点击替换内容，即可将原来的内容替换为编码/解码后的内容：* 使用悬浮框进行编码与解码当你在Web Fuzzer中鼠标点选了某个位置时，会弹出一个悬浮框，在这个悬浮框中你选择对选择的内容进行编码和解码。当我们选择了其中一个编码时，内容并不会被编码，而是使用了 fuzztag 来将其包裹，这会在 Web Fuzzer 真正发送请求前才将其编码。当我们选择解码时，会进行智能解码的方式，即会自动判断编码类型，然后进行解码，之后选择一个你认为正确的内容，可以对选中的内容进行替换：HTTP请求包变形这个功能可以对请求包进行一些变形，例如将GET请求变为POST请求，或者将POST请求变为GET请求等等。\\n\"},{\"score\":0.4066096544265747,\"imagesUrl\":[],\"documentName\":\"docs/yak-basic/cap8-3-port-n-service-scan\",\"title\":\"\",\"content\":\"【文档名】:docs/yak-basic/cap8-3-port-n-service-scan\\n【标题】:\\n【正文】:servicescan.excludeHosts(\\\"1.1.1.1\\\")|\\n||probeTimeout|设置单个请求探测超时时间为10秒 servicescan.probeTimeout(10)|\\n||proxy|设置代理 servicescan.proxy(\\\"http://127.0.0.1:8083\\\")|\\n||cache|设置启用缓存 servicescan.cache(true)|\\n||databaseCache|设置启用数据库缓存 servicescan.databaseCache(true)|\\n||webRule|设置启用用户自定义 web 规则|\\n||nmapRule|设置 nmap 规则文件|\\n||nmapRarityMax|nmap 规则筛选，通过稀有度 servicescan.nmapRarityMax(10)|\\n||maxProbes|设置每个服务最多主动发送的包数 servicescan.maxProbes(10)|\\n||maxProbesConcurrent|设置主动发包模式下的并发量 servicescan.maxProbesConcurrent(10)|\\n\"},{\"score\":0.40291067957878113,\"imagesUrl\":[],\"documentName\":\"Yaklab/wiki/CommonVulnerabilities/xss\",\"title\":\"\",\"content\":\"【文档名】:Yaklab/wiki/CommonVulnerabilities/xss\\n【标题】:\\n【正文】:sidebar_position: 10XSS漏洞反射型XSS漏洞描述：反射型XSS是一种非持久性的攻击，它指的是恶意攻击者往Web页面里插入恶意代码，当用户浏览该页之时，嵌入在Web页面中的HTML代码会被执行，从而达到恶意攻击用户的目的。这里插入的恶意代码并没有保存在目标网站，需要引诱用户点击一个链接，跳转到目标网站上的恶意页面来实施攻击漏洞案例：POST型反射XSS访问测试网站上的一个搜索框界面 在搜索框输入： alert(1) 点击查询时开启抓包自动将输入的 payload 拼接到发送的包中放包后成功触发弹窗GET型反射XSS直接拼接到含有漏洞URL中，例如：https://xxx.xxxx.xxx/search/foods.html?keyword= alert(1)存储型XSS漏洞描述：存储型XSS，也就是持久型XSS。攻击者上传的包含恶意js脚本的留言等信息被Web应用程序保存到数据库中，Web应用程序在生成新的页面的时候如果包含了该恶意js脚本，这样会导致所有访问该网页的浏览器解析执行该恶意脚本。这种攻击类型一般常见在博客、论坛等网站中漏洞案例：案例1\\n\"}]},\"query\":\"web\",\"aisearch\":\"web desarrollo aplicación internet sitio web tecnología online servidor cliente navegador programación diseño implementación seguridad optimización rendimiento experiencia usuario interactividad funcionalidad contenido digital plataforma virtual estructura frontend backend fullstack frameworks lenguajes protocolos HTTP HTTPS API RESTful integración bases datos escalabilidad mantenimiento compatibilidad adaptabilidad tendencias innovación estándares W3C accesibilidad SEO posicionamiento analytics monitorización hosting dominio CMS framework CSS HTML JavaScript PHP Python Ruby Java Node.js React Angular Vue.js Django Flask Laravel Symfony Expressjs configuración personalización automatización calidad control versiones Git gestión proyectos colaboración herramientas testing debugging deployment actualización mejora continua recursos tutoriales guías documentación casos estudio práctica profesional experto principiante aprendizaje formación certificación especialización talento empleo mercado trabajo freelance negocio emprendimiento startup éxito案例研究最佳实践专业人士初学者学习培训认证专业化人才就业市场工作自由职业商业创业初创公司成功案例研究最佳实践专业人士初学者学习培训认证专业化\"}"
    }
  ]
